                               Interpreter syntax

Տիպեր  ֊֊»       itip == int 
		  dtip == double 
		  btip == bool 
		  stip == string

Պայման  ֊֊»  if   ==   uf

                         uf  : արտահայտություն  պայման  արտահայտություն  :  {
		
		օրինակ՝ 
		      	       uf : expression condition expression : {

				body

			       }

Ցիկլ    ֊֊»   vuy == while
	
		օրինակ՝
		                vuy [  արտահայտություն ]   (

		             	bady

		                 )
Տպել ֊֊»    tosee == cout

		օրինակ՝

			     tosee <<  արտ․ << արտ.;


Մաթեմատիկական գործողությունները     ( + , - , * , / , % )։

string -ի հայտարարությունը՝          stip անուն  = < տող > ;
stip name = < hello world >  ;

Տիպերի համար՝

			տիպերի համար սահմանվել է այսպիսի syntax
			
օրինակ՝ 
հայտարարել տիպ,  հայտարարել փոփոխականի անուն, վերագրել արժեք․ 
եթե տողը ավարտվում է, ապա պետք է վերջանա (;) կամ կարող ենք կատարել մաթեմատիկական գործողություններ օր՝

itip number = 22;
կամ
itip sum = 22 + 33;   // ( + , - , * ,  / , % )
bool value = true ;  //  (true , false  և  ցանկացած  լիտերալ արժեք )
white space  ֊ ների հետ  կապված խնդիր չի առաջանում։
			
Ցանկացած տող եթե սինտաքսին չի համապատասխանում, ապա  կվերադարձնի Error:
օր՝  
		itip number = ; // error
		dtip sum = 22    //  error
	            bool value = tru ; // error
		stip tox = < hello world ;  // error
		dtipnum = 11; // error
 
		itip       number       =      23   ;  //  ok
		
		itip number = 29; //  error  քանի որ նույն անունը եթե մեկ անգամ հայտարարվել է, ապա չենք կարող երկրորդ անգամ հայտարարել  (ցանկացած տիպի համար)։


Տպել՝

	tosee << արտ ;  ||    tosee << փոփոխական  << փոփոխական ;
	tosee  փոխարինում է  cout – ին,
	ցանկացած քանակությամբ կարող ենք տպել,  փոփոխականը 
	պետք է լինի հայտարարված, եթե չկա  ապա  կունենանք error
	
	օր՝
 		itip num = 10 + 6 ;
		dtip sum = 333;
		btip val = true;
		stip str = < hello > ;

		tosee << num << val << str ;  // ok
		կտպի   16  1   hello 
			
       		tosee << number << name << age ; // error  
		
		error կստանանք, քանի որ name և  age փոփոխականներ հայտարարված չեն։

		

Պայման՝  

 	      uf : արտահայտություն պայման  արտահայտություն  ։  {

                  արտահայտություն  պետք է լինեն  փոփոխականները,  եթե այդ փոփոխականները հայտարարված են, ապա առանց խնդիր կաշխատի։
Պայմանը կարող է լինել   (  == , <  ,  >  )  եթե պայմանը  true է,  ապա  կմտնի 
body  ու կկատարի բոլոր գործողությունները, եթե  պայմանը  false է, ապա 
կանտեսի մարմինը։ Մարմինը  վերջանում է  փակվող փակագծով    (….}….)։
	
օր՝

                       itip num = 10 + 6 ;
		dtip sum = 333;
                       uf   :   num   >    sum   :  {             //  ( > , <  , == )  //քանի որ  պայմանը false է,
									չի մտնում մարմին 
		
		tosee << sum ;
		stip str = < hello world > ;
		btip  value = false ;
	
		}
		tosee  <<  str  << value ;  // error, քանի որ չկա հայտարարված նման 
						փոփոխականներ։


		
		itip num = 10 + 6 ;
	           dtip sum = 333;
                       uf   :   num   <    sum   :  {             //  ( > , <  , == )
		
		tosee << sum ;
		stip str = < hello world > ;
		btip  value = false ;
	
		}   //   եթե չփակենք  uf – ի փակագիծը  error կստանանք
		tosee  <<  str  << value ;  //  կտպի 333  hello world  1 



Ցիկլ՝
	
                     vuy [  արտահայտություն ]   (

	      արտահայտությը պետք է լինի հայտարարված փոփոխական, եթե այդ փոփոխականը true, ապա կատարում է body֊ն, եթե ոչ, ապա չի կատարի մարմինը ։ Մարմինը վերջանում է  փակվող փակագծով   …..)……,  եթե չլինի  կստանանք error։ bady֊ն կարող է լինել միայն tosee (cout) գործողությունը ։

օր՝

		itip num = 1 ;
		dtip sum = 3;
		itip  ssr = 99;
		btip val = false;

		vuy [ num ]     (    // եթե num  true  ապա կմտնի մարմին 
		
		tosee << sum ; //    կտպի   3 
		tosee << ssr - ; //   կտպի  99 – ից  մինչև  0 
		tosee <<  num + ;   կտպի  1 – ից  + անվերջ 
              ) // եթե  չլինի error ;
		
		
		


		               
